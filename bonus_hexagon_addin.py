import bpy
class ShaderNodebonus_hexagon(bpy.types.ShaderNodeCustomGroup):
    bl_name='ShaderNodebonus_hexagon'
    bl_label='bonus_hexagon'
    bl_icon='NONE'

    def init(self, context):
        self.getNodetree(self.name + '_node_tree')
        self.inputs['Vector'].default_value=[0,0,0]
        self.inputs['HAS_Vector'].default_value=0
        self.inputs['HAS_Vector'].hide=True
        self.inputs['scale'].default_value=5
        self.inputs['feather'].default_value=0.1

    def update(self):
        if self.inputs['Vector'].is_linked:
            self.inputs['HAS_Vector'].default_value=1
        else:    
            self.inputs['HAS_Vector'].default_value=0
            pass

    def value_set(self, obj, path, value):
        if '.' in path:
            path_prop, path_attr = path.rsplit('.', 1)
            prop = obj.path_resolve(path_prop)
        else:
            prop = obj
            path_attr = path
        setattr(prop, path_attr, value)

    def createNodetree(self, name) :
        self.node_tree = bpy.data.node_groups.new(name, 'ShaderNodeTree')
        #Nodes
        self.addNode('NodeGroupInput', { 'name':'GroupInput'  })
        self.addNode('NodeGroupOutput', { 'name':'GroupOutput'  })
        self.addNode('ShaderNodeTexCoord', { 'name':'Node0'  })
        self.addNode('ShaderNodeMixRGB', { 'name':'Node1'  })
        self.addNode('ShaderNodeValue', { 'name':'Node4' ,'outputs[0].default_value':0  })
        self.addNode('ShaderNodeValue', { 'name':'Node5' ,'outputs[0].default_value':1  })
        self.addNode('ShaderNodeValue', { 'name':'Node6' ,'outputs[0].default_value':0  })
        self.addNode('ShaderNodeValue', { 'name':'Node8' ,'outputs[0].default_value':0.57735002  })
        self.addNode('ShaderNodeValue', { 'name':'Node9' ,'outputs[0].default_value':2  })
        self.addNode('ShaderNodeValue', { 'name':'Node11' ,'outputs[0].default_value':0.5  })
        self.addNode('ShaderNodeValue', { 'name':'Node12' ,'outputs[0].default_value':1  })
        self.addNode('ShaderNodeValue', { 'name':'Node13' ,'outputs[0].default_value':1.5  })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node14'  })
        self.addNode('ShaderNodeMath', { 'name':'Node15' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node16'  })
        self.addNode('ShaderNodeMath', { 'name':'Node17' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeCombineXYZ', { 'name':'Node18'  })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node19'  })
        self.addNode('ShaderNodeMath', { 'name':'Node20' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node21' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node22'  })
        self.addNode('ShaderNodeMath', { 'name':'Node23' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node24' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node25' ,'operation':'DIVIDE' })
        self.addNode('ShaderNodeMath', { 'name':'Node26' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node27' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node28' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node29' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node30' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node31' ,'operation':'ADD' })
        self.addNode('ShaderNodeMath', { 'name':'Node32' ,'operation':'DIVIDE' })
        self.addNode('ShaderNodeMath', { 'name':'Node33' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node34' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node35' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node36' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node37' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node38' ,'inputs[1].default_value':0.5 ,'operation':'ABSOLUTE' })
        self.addNode('ShaderNodeMath', { 'name':'Node39' ,'operation':'DIVIDE' })
        self.addNode('ShaderNodeMath', { 'name':'Node40' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node41' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node42' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node43' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node44' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node45' ,'inputs[1].default_value':0.5 ,'operation':'ABSOLUTE' })
        self.addNode('ShaderNodeMath', { 'name':'Node46' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node47' ,'operation':'ADD' })
        self.addNode('ShaderNodeMath', { 'name':'Node48' ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeMixRGB', { 'name':'Node49'  })
        self.addNode('ShaderNodeMath', { 'name':'Node61' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node62' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node63' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node64' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node65' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeCombineXYZ', { 'name':'Node66'  })
        self.addNode('ShaderNodeMath', { 'name':'Node67' ,'operation':'MAXIMUM' })
        self.addNode('ShaderNodeMath', { 'name':'Node68' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node69' ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeMath', { 'name':'Node70' ,'operation':'DIVIDE' })
        self.addNode('ShaderNodeMath', { 'name':'Node71' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node72' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node73' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node74' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node75' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node76' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node77' ,'operation':'ADD' })
        self.addNode('ShaderNodeMath', { 'name':'Node78' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node79' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node80' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node81' ,'operation':'ADD' })
        self.addNode('ShaderNodeMath', { 'name':'Node82' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node83' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeCombineXYZ', { 'name':'Node84'  })
        self.addNode('ShaderNodeMath', { 'name':'Node85' ,'operation':'DIVIDE' })
        self.addNode('ShaderNodeMath', { 'name':'Node86' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node87' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node88' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node89' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node90' ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeMixRGB', { 'name':'Node91'  })
        self.addNode('ShaderNodeMath', { 'name':'Node92' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node93' ,'operation':'ABSOLUTE' })
        self.addNode('ShaderNodeMath', { 'name':'Node94' ,'inputs[1].default_value':0.000001 ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node95'  })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node96'  })
        self.addNode('ShaderNodeMath', { 'name':'Node97' ,'operation':'ADD' })
        self.addNode('ShaderNodeCombineXYZ', { 'name':'Node98'  })
        self.addNode('ShaderNodeMixRGB', { 'name':'Node99'  })
        self.addNode('ShaderNodeMath', { 'name':'Node100' ,'operation':'DIVIDE' })
        self.addNode('ShaderNodeMath', { 'name':'Node101' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node102' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node103' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node104' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node105' ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeMath', { 'name':'Node106' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node107' ,'operation':'ABSOLUTE' })
        self.addNode('ShaderNodeMath', { 'name':'Node108' ,'inputs[1].default_value':0.000001 ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeMath', { 'name':'Node109' ,'operation':'DIVIDE' })
        self.addNode('ShaderNodeMath', { 'name':'Node110' ,'inputs[1].default_value':0.5 ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node111' ,'inputs[1].default_value':0.5 ,'operation':'ROUND' })
        self.addNode('ShaderNodeMath', { 'name':'Node112' ,'operation':'MULTIPLY' })
        self.addNode('ShaderNodeMath', { 'name':'Node113' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node114' ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeMath', { 'name':'Node115' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node116' ,'operation':'ABSOLUTE' })
        self.addNode('ShaderNodeMath', { 'name':'Node117' ,'inputs[1].default_value':0.000001 ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeMixRGB', { 'name':'Node118'  })
        self.addNode('ShaderNodeMath', { 'name':'Node119' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node120' ,'operation':'ABSOLUTE' })
        self.addNode('ShaderNodeMath', { 'name':'Node121' ,'inputs[1].default_value':0.000001 ,'operation':'GREATER_THAN' })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node122'  })
        self.addNode('ShaderNodeSeparateXYZ', { 'name':'Node123'  })
        self.addNode('ShaderNodeMath', { 'name':'Node124' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeCombineXYZ', { 'name':'Node125'  })
        self.addNode('ShaderNodeMixRGB', { 'name':'Node126'  })
        self.addNode('ShaderNodeMixRGB', { 'name':'Node127'  })
        self.addNode('ShaderNodeMath', { 'name':'Node129' ,'operation':'MAXIMUM' })
        self.addNode('ShaderNodeMath', { 'name':'Node130' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node131' ,'inputs[1].default_value':0.5 ,'operation':'ABSOLUTE' })
        self.addNode('ShaderNodeMath', { 'name':'Node132' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node133' ,'operation':'SUBTRACT' })
        self.addNode('ShaderNodeMath', { 'name':'Node134' ,'operation':'DIVIDE','use_clamp':1  })
        #Sockets
        self.addSocket(False, 'NodeSocketVector', 'Vector')
        self.addSocket(False, 'NodeSocketFloat', 'HAS_Vector')
        self.addSocket(False, 'NodeSocketFloat', 'scale')
        self.addSocket(False, 'NodeSocketFloat', 'feather')
        self.addSocket(True, 'NodeSocketFloat', 'Value')
        self.addSocket(True, 'NodeSocketVector', 'CellID')
        #Links
        self.innerLink('nodes["GroupInput"].outputs[1]', 'nodes["Node1"].inputs[0]')
        self.innerLink('nodes["Node0"].outputs[3]', 'nodes["Node1"].inputs[1]')
        self.innerLink('nodes["GroupInput"].outputs[0]', 'nodes["Node1"].inputs[2]')
        self.innerLink('nodes["Node1"].outputs[0]', 'nodes["Node14"].inputs[0]')
        self.innerLink('nodes["Node14"].outputs[0]', 'nodes["Node15"].inputs[0]')
        self.innerLink('nodes["GroupInput"].outputs[2]', 'nodes["Node15"].inputs[1]')
        self.innerLink('nodes["Node1"].outputs[0]', 'nodes["Node16"].inputs[0]')
        self.innerLink('nodes["Node16"].outputs[1]', 'nodes["Node17"].inputs[0]')
        self.innerLink('nodes["GroupInput"].outputs[2]', 'nodes["Node17"].inputs[1]')
        self.innerLink('nodes["Node15"].outputs[0]', 'nodes["Node18"].inputs[0]')
        self.innerLink('nodes["Node17"].outputs[0]', 'nodes["Node18"].inputs[1]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node18"].inputs[2]')
        self.innerLink('nodes["Node18"].outputs[0]', 'nodes["Node19"].inputs[0]')
        self.innerLink('nodes["Node19"].outputs[0]', 'nodes["Node20"].inputs[0]')
        self.innerLink('nodes["Node8"].outputs[0]', 'nodes["Node20"].inputs[1]')
        self.innerLink('nodes["Node20"].outputs[0]', 'nodes["Node21"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node21"].inputs[1]')
        self.innerLink('nodes["Node18"].outputs[0]', 'nodes["Node22"].inputs[0]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node23"].inputs[0]')
        self.innerLink('nodes["Node23"].outputs[0]', 'nodes["Node24"].inputs[0]')
        self.innerLink('nodes["Node24"].outputs[0]', 'nodes["Node25"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node25"].inputs[1]')
        self.innerLink('nodes["Node25"].outputs[0]', 'nodes["Node26"].inputs[0]')
        self.innerLink('nodes["Node26"].outputs[0]', 'nodes["Node27"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node28"].inputs[0]')
        self.innerLink('nodes["Node27"].outputs[0]', 'nodes["Node28"].inputs[1]')
        self.innerLink('nodes["Node24"].outputs[0]', 'nodes["Node29"].inputs[0]')
        self.innerLink('nodes["Node28"].outputs[0]', 'nodes["Node29"].inputs[1]')
        self.innerLink('nodes["Node29"].outputs[0]', 'nodes["Node30"].inputs[0]')
        self.innerLink('nodes["Node11"].outputs[0]', 'nodes["Node30"].inputs[1]')
        self.innerLink('nodes["Node22"].outputs[1]', 'nodes["Node31"].inputs[0]')
        self.innerLink('nodes["Node30"].outputs[0]', 'nodes["Node31"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node32"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node32"].inputs[1]')
        self.innerLink('nodes["Node32"].outputs[0]', 'nodes["Node33"].inputs[0]')
        self.innerLink('nodes["Node33"].outputs[0]', 'nodes["Node34"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node35"].inputs[0]')
        self.innerLink('nodes["Node34"].outputs[0]', 'nodes["Node35"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node36"].inputs[0]')
        self.innerLink('nodes["Node35"].outputs[0]', 'nodes["Node36"].inputs[1]')
        self.innerLink('nodes["Node36"].outputs[0]', 'nodes["Node37"].inputs[0]')
        self.innerLink('nodes["Node11"].outputs[0]', 'nodes["Node37"].inputs[1]')
        self.innerLink('nodes["Node37"].outputs[0]', 'nodes["Node38"].inputs[0]')
        self.innerLink('nodes["Node31"].outputs[0]', 'nodes["Node39"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node39"].inputs[1]')
        self.innerLink('nodes["Node39"].outputs[0]', 'nodes["Node40"].inputs[0]')
        self.innerLink('nodes["Node40"].outputs[0]', 'nodes["Node41"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node42"].inputs[0]')
        self.innerLink('nodes["Node41"].outputs[0]', 'nodes["Node42"].inputs[1]')
        self.innerLink('nodes["Node31"].outputs[0]', 'nodes["Node43"].inputs[0]')
        self.innerLink('nodes["Node42"].outputs[0]', 'nodes["Node43"].inputs[1]')
        self.innerLink('nodes["Node43"].outputs[0]', 'nodes["Node44"].inputs[0]')
        self.innerLink('nodes["Node11"].outputs[0]', 'nodes["Node44"].inputs[1]')
        self.innerLink('nodes["Node44"].outputs[0]', 'nodes["Node45"].inputs[0]')
        self.innerLink('nodes["Node38"].outputs[0]', 'nodes["Node46"].inputs[0]')
        self.innerLink('nodes["Node13"].outputs[0]', 'nodes["Node46"].inputs[1]')
        self.innerLink('nodes["Node46"].outputs[0]', 'nodes["Node47"].inputs[0]')
        self.innerLink('nodes["Node45"].outputs[0]', 'nodes["Node47"].inputs[1]')
        self.innerLink('nodes["Node38"].outputs[0]', 'nodes["Node48"].inputs[0]')
        self.innerLink('nodes["Node4"].outputs[0]', 'nodes["Node48"].inputs[1]')
        self.innerLink('nodes["Node48"].outputs[0]', 'nodes["Node49"].inputs[0]')
        self.innerLink('nodes["Node4"].outputs[0]', 'nodes["Node49"].inputs[1]')
        self.innerLink('nodes["Node5"].outputs[0]', 'nodes["Node49"].inputs[2]')
        self.innerLink('nodes["Node45"].outputs[0]', 'nodes["Node61"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node61"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node62"].inputs[0]')
        self.innerLink('nodes["Node62"].outputs[0]', 'nodes["Node63"].inputs[0]')
        self.innerLink('nodes["Node31"].outputs[0]', 'nodes["Node64"].inputs[0]')
        self.innerLink('nodes["Node64"].outputs[0]', 'nodes["Node65"].inputs[0]')
        self.innerLink('nodes["Node63"].outputs[0]', 'nodes["Node66"].inputs[0]')
        self.innerLink('nodes["Node65"].outputs[0]', 'nodes["Node66"].inputs[1]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node66"].inputs[2]')
        self.innerLink('nodes["Node47"].outputs[0]', 'nodes["Node67"].inputs[0]')
        self.innerLink('nodes["Node61"].outputs[0]', 'nodes["Node67"].inputs[1]')
        self.innerLink('nodes["Node67"].outputs[0]', 'nodes["Node68"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node68"].inputs[1]')
        self.innerLink('nodes["Node68"].outputs[0]', 'nodes["Node69"].inputs[0]')
        self.innerLink('nodes["Node4"].outputs[0]', 'nodes["Node69"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node70"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node70"].inputs[1]')
        self.innerLink('nodes["Node70"].outputs[0]', 'nodes["Node71"].inputs[0]')
        self.innerLink('nodes["Node71"].outputs[0]', 'nodes["Node72"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node73"].inputs[0]')
        self.innerLink('nodes["Node72"].outputs[0]', 'nodes["Node73"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node74"].inputs[0]')
        self.innerLink('nodes["Node73"].outputs[0]', 'nodes["Node74"].inputs[1]')
        self.innerLink('nodes["Node74"].outputs[0]', 'nodes["Node75"].inputs[0]')
        self.innerLink('nodes["Node11"].outputs[0]', 'nodes["Node75"].inputs[1]')
        self.innerLink('nodes["Node49"].outputs[0]', 'nodes["Node76"].inputs[0]')
        self.innerLink('nodes["Node75"].outputs[0]', 'nodes["Node76"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node77"].inputs[0]')
        self.innerLink('nodes["Node76"].outputs[0]', 'nodes["Node77"].inputs[1]')
        self.innerLink('nodes["Node77"].outputs[0]', 'nodes["Node78"].inputs[0]')
        self.innerLink('nodes["Node78"].outputs[0]', 'nodes["Node79"].inputs[0]')
        self.innerLink('nodes["Node49"].outputs[0]', 'nodes["Node80"].inputs[0]')
        self.innerLink('nodes["Node75"].outputs[0]', 'nodes["Node80"].inputs[1]')
        self.innerLink('nodes["Node31"].outputs[0]', 'nodes["Node81"].inputs[0]')
        self.innerLink('nodes["Node80"].outputs[0]', 'nodes["Node81"].inputs[1]')
        self.innerLink('nodes["Node81"].outputs[0]', 'nodes["Node82"].inputs[0]')
        self.innerLink('nodes["Node82"].outputs[0]', 'nodes["Node83"].inputs[0]')
        self.innerLink('nodes["Node79"].outputs[0]', 'nodes["Node84"].inputs[0]')
        self.innerLink('nodes["Node83"].outputs[0]', 'nodes["Node84"].inputs[1]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node84"].inputs[2]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node85"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node85"].inputs[1]')
        self.innerLink('nodes["Node85"].outputs[0]', 'nodes["Node86"].inputs[0]')
        self.innerLink('nodes["Node86"].outputs[0]', 'nodes["Node87"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node88"].inputs[0]')
        self.innerLink('nodes["Node87"].outputs[0]', 'nodes["Node88"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node89"].inputs[0]')
        self.innerLink('nodes["Node88"].outputs[0]', 'nodes["Node89"].inputs[1]')
        self.innerLink('nodes["Node89"].outputs[0]', 'nodes["Node90"].inputs[0]')
        self.innerLink('nodes["Node11"].outputs[0]', 'nodes["Node90"].inputs[1]')
        self.innerLink('nodes["Node90"].outputs[0]', 'nodes["Node91"].inputs[0]')
        self.innerLink('nodes["Node5"].outputs[0]', 'nodes["Node91"].inputs[1]')
        self.innerLink('nodes["Node4"].outputs[0]', 'nodes["Node91"].inputs[2]')
        self.innerLink('nodes["Node91"].outputs[0]', 'nodes["Node92"].inputs[0]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node92"].inputs[1]')
        self.innerLink('nodes["Node92"].outputs[0]', 'nodes["Node93"].inputs[0]')
        self.innerLink('nodes["Node93"].outputs[0]', 'nodes["Node94"].inputs[0]')
        self.innerLink('nodes["Node84"].outputs[0]', 'nodes["Node95"].inputs[0]')
        self.innerLink('nodes["Node84"].outputs[0]', 'nodes["Node96"].inputs[0]')
        self.innerLink('nodes["Node96"].outputs[1]', 'nodes["Node97"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node97"].inputs[1]')
        self.innerLink('nodes["Node95"].outputs[0]', 'nodes["Node98"].inputs[0]')
        self.innerLink('nodes["Node97"].outputs[0]', 'nodes["Node98"].inputs[1]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node98"].inputs[2]')
        self.innerLink('nodes["Node94"].outputs[0]', 'nodes["Node99"].inputs[0]')
        self.innerLink('nodes["Node84"].outputs[0]', 'nodes["Node99"].inputs[1]')
        self.innerLink('nodes["Node98"].outputs[0]', 'nodes["Node99"].inputs[2]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node100"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node100"].inputs[1]')
        self.innerLink('nodes["Node100"].outputs[0]', 'nodes["Node101"].inputs[0]')
        self.innerLink('nodes["Node101"].outputs[0]', 'nodes["Node102"].inputs[0]')
        self.innerLink('nodes["Node9"].outputs[0]', 'nodes["Node103"].inputs[0]')
        self.innerLink('nodes["Node102"].outputs[0]', 'nodes["Node103"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node104"].inputs[0]')
        self.innerLink('nodes["Node103"].outputs[0]', 'nodes["Node104"].inputs[1]')
        self.innerLink('nodes["Node104"].outputs[0]', 'nodes["Node105"].inputs[0]')
        self.innerLink('nodes["Node5"].outputs[0]', 'nodes["Node105"].inputs[1]')
        self.innerLink('nodes["Node105"].outputs[0]', 'nodes["Node106"].inputs[0]')
        self.innerLink('nodes["Node4"].outputs[0]', 'nodes["Node106"].inputs[1]')
        self.innerLink('nodes["Node106"].outputs[0]', 'nodes["Node107"].inputs[0]')
        self.innerLink('nodes["Node107"].outputs[0]', 'nodes["Node108"].inputs[0]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node109"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node109"].inputs[1]')
        self.innerLink('nodes["Node109"].outputs[0]', 'nodes["Node110"].inputs[0]')
        self.innerLink('nodes["Node110"].outputs[0]', 'nodes["Node111"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node112"].inputs[0]')
        self.innerLink('nodes["Node111"].outputs[0]', 'nodes["Node112"].inputs[1]')
        self.innerLink('nodes["Node21"].outputs[0]', 'nodes["Node113"].inputs[0]')
        self.innerLink('nodes["Node112"].outputs[0]', 'nodes["Node113"].inputs[1]')
        self.innerLink('nodes["Node113"].outputs[0]', 'nodes["Node114"].inputs[0]')
        self.innerLink('nodes["Node11"].outputs[0]', 'nodes["Node114"].inputs[1]')
        self.innerLink('nodes["Node114"].outputs[0]', 'nodes["Node115"].inputs[0]')
        self.innerLink('nodes["Node4"].outputs[0]', 'nodes["Node115"].inputs[1]')
        self.innerLink('nodes["Node115"].outputs[0]', 'nodes["Node116"].inputs[0]')
        self.innerLink('nodes["Node116"].outputs[0]', 'nodes["Node117"].inputs[0]')
        self.innerLink('nodes["Node108"].outputs[0]', 'nodes["Node118"].inputs[0]')
        self.innerLink('nodes["Node108"].outputs[0]', 'nodes["Node118"].inputs[1]')
        self.innerLink('nodes["Node117"].outputs[0]', 'nodes["Node118"].inputs[2]')
        self.innerLink('nodes["Node118"].outputs[0]', 'nodes["Node119"].inputs[0]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node119"].inputs[1]')
        self.innerLink('nodes["Node119"].outputs[0]', 'nodes["Node120"].inputs[0]')
        self.innerLink('nodes["Node120"].outputs[0]', 'nodes["Node121"].inputs[0]')
        self.innerLink('nodes["Node99"].outputs[0]', 'nodes["Node122"].inputs[0]')
        self.innerLink('nodes["Node99"].outputs[0]', 'nodes["Node123"].inputs[0]')
        self.innerLink('nodes["Node123"].outputs[1]', 'nodes["Node124"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node124"].inputs[1]')
        self.innerLink('nodes["Node122"].outputs[0]', 'nodes["Node125"].inputs[0]')
        self.innerLink('nodes["Node124"].outputs[0]', 'nodes["Node125"].inputs[1]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node125"].inputs[2]')
        self.innerLink('nodes["Node121"].outputs[0]', 'nodes["Node126"].inputs[0]')
        self.innerLink('nodes["Node99"].outputs[0]', 'nodes["Node126"].inputs[1]')
        self.innerLink('nodes["Node125"].outputs[0]', 'nodes["Node126"].inputs[2]')
        self.innerLink('nodes["Node69"].outputs[0]', 'nodes["Node127"].inputs[0]')
        self.innerLink('nodes["Node66"].outputs[0]', 'nodes["Node127"].inputs[1]')
        self.innerLink('nodes["Node126"].outputs[0]', 'nodes["Node127"].inputs[2]')
        self.innerLink('nodes["Node47"].outputs[0]', 'nodes["Node129"].inputs[0]')
        self.innerLink('nodes["Node61"].outputs[0]', 'nodes["Node129"].inputs[1]')
        self.innerLink('nodes["Node129"].outputs[0]', 'nodes["Node130"].inputs[0]')
        self.innerLink('nodes["Node12"].outputs[0]', 'nodes["Node130"].inputs[1]')
        self.innerLink('nodes["Node130"].outputs[0]', 'nodes["Node131"].inputs[0]')
        self.innerLink('nodes["Node131"].outputs[0]', 'nodes["Node132"].inputs[0]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node132"].inputs[1]')
        self.innerLink('nodes["GroupInput"].outputs[3]', 'nodes["Node133"].inputs[0]')
        self.innerLink('nodes["Node6"].outputs[0]', 'nodes["Node133"].inputs[1]')
        self.innerLink('nodes["Node132"].outputs[0]', 'nodes["Node134"].inputs[0]')
        self.innerLink('nodes["Node133"].outputs[0]', 'nodes["Node134"].inputs[1]')
        self.innerLink('nodes["Node134"].outputs[0]', 'nodes["GroupOutput"].inputs[0]')
        self.innerLink('nodes["Node127"].outputs[0]', 'nodes["GroupOutput"].inputs[1]')
    def getNodetree(self, name):
        if bpy.data.node_groups.find(name)==-1:
            self.createNodetree(name)
        else:
            self.node_tree=bpy.data.node_groups[name]
                   
    def addSocket(self, is_output, sockettype, name):
        if bpy.app.version >= (4, 0, 0):
            if is_output==True:
                socket = self.node_tree.interface.new_socket(name, in_out='OUTPUT', socket_type=sockettype)
            else:
                socket = self.node_tree.interface.new_socket(name, in_out='INPUT', socket_type=sockettype)
        else:
            #for now duplicated socket names are not allowed
            if is_output==True:
                if self.node_tree.nodes['GroupOutput'].inputs.find(name)==-1:
                    socket=self.node_tree.outputs.new(sockettype, name)
            elif is_output==False:
                if self.node_tree.nodes['GroupInput'].outputs.find(name)==-1:
                    socket=self.node_tree.inputs.new(sockettype, name)
        return socket
       
    def addNode(self, nodetype, attrs):
        node=self.node_tree.nodes.new(nodetype)
        for attr in attrs:
            self.value_set(node, attr, attrs[attr])
        return node
   
    def getNode(self, nodename):
        if self.node_tree.nodes.find(nodename)>-1:
            return self.node_tree.nodes[nodename]
        return None
   
    def innerLink(self, socketin, socketout):
        SI=self.node_tree.path_resolve(socketin)
        SO=self.node_tree.path_resolve(socketout)
        self.node_tree.links.new(SI, SO)
       
    def free(self):
        if self.node_tree.users==1:
            bpy.data.node_groups.remove(self.node_tree, do_unlink=True)
 
 
 
